### E-commerce Microservices - Complete API Tests
### Execute na ordem para melhores resultados e substitua IDs pelos valores reais

### =================================================================
### 1. HEALTH CHECKS - Verificação de saúde dos serviços
### =================================================================

# Products Service 
GET http://localhost:3001/health
###

# Clients Service
GET http://localhost:3002/health
###

# Orders Service
GET http://localhost:3003/health
###

# Payments Service
GET http://localhost:3004/health
###

### =================================================================
### 2. SETUP INICIAL - Criação de tipos de pagamento
### =================================================================

# Criar tipo de pagamento: Cartão de Crédito
POST http://localhost:3004/v1/payments/types
Content-Type: application/json

{
  "name": "Cartão de Crédito"
}

###

# Criar tipo de pagamento: PIX
POST http://localhost:3004/v1/payments/types
Content-Type: application/json

{
  "name": "PIX"
}

###

# Criar tipo de pagamento: Boleto
POST http://localhost:3004/v1/payments/types
Content-Type: application/json

{
  "name": "Boleto"
}

###

# Listar tipos de pagamento
GET http://localhost:3004/v1/payments/types
###

# 3.1 Criar cliente válido
POST http://localhost:3002/v1/clients
Content-Type: application/json

{
  "name": "João da Silva",
  "email": "joao.silva@email.com"
}

###

###
GET http://localhost:3002/v1/clients

###

# 3.2 Criar produtos
POST http://localhost:3001/v1/products
Content-Type: application/json

{
  "name": "iPhone 15 Pro Max",
  "price": 8999.99,
  "stock": 10
}

###

POST http://localhost:3001/v1/products
Content-Type: application/json

{
  "name": "AirPods Pro 2", 
  "price": 2499.99,
  "stock": 25
}

###

POST http://localhost:3001/v1/products
Content-Type: application/json

{
  "name": "MacBook Air M3",
  "price": 12999.99,
  "stock": 5
}

###

# 3.3 Listar produtos
GET http://localhost:3001/v1/products
###

# 3.4 Criar pedido com múltiplos produtos (substitua IDs)
POST http://localhost:3003/v1/orders
Content-Type: application/json

{
  "clientId": "66fc2c1a-da33-4bbf-a6bf-229ee8ef9f56",
  "items": [
    {
      "productId": "8a804b08-f8cf-424c-88e4-40f13f053298",
      "quantity": 1
    }
  ]
}

###

# 3.5 Listar pedidos
GET http://localhost:3003/v1/orders
###

# 3.6 Processar pagamento único (substitua IDs)
POST http://localhost:3004/v1/payments/process/ORDER_ID_HERE
Content-Type: application/json

{
  "payments": [
    {
      "typePaymentId": "PAYMENT_TYPE_ID_HERE",
      "amount": 11499.98
    }
  ]
}

###

# Verificar pagamentos do pedido
GET http://localhost:3004/v1/payments/orders/ORDER_ID_HERE
###

### =================================================================
### TESTES DE VALIDAÇÃO
### =================================================================

# Cliente sem nome (deve falhar)
POST http://localhost:3002/v1/clients
Content-Type: application/json

{
  "email": "teste@email.com"
}

###

# Cliente com email inválido (deve falhar)
POST http://localhost:3002/v1/clients
Content-Type: application/json

{
  "name": "Cliente Teste",
  "email": "email-invalido"
}

###

# Produto com preço negativo (deve falhar)
POST http://localhost:3001/v1/products
Content-Type: application/json

{
  "name": "Produto Inválido",
  "price": -100,
  "stock": 10
}

###

# Pedido com cliente inexistente (deve falhar)
POST http://localhost:3003/v1/orders
Content-Type: application/json

{
  "clientId": "cliente-inexistente-123",
  "items": [
    {
      "productId": "PRODUCT_ID",
      "quantity": 1
    }
  ]
}

# Criar produto com estoque limitado
POST http://localhost:3001/v1/products
Content-Type: application/json

{
  "name": "Produto Limitado",
  "price": 299.99,
  "stock": 2
}

# Pedido que esgota estoque (substitua IDs)
POST http://localhost:3003/v1/orders
Content-Type: application/json

{
  "clientId": "CLIENT_ESTOQUE_ID_HERE",
  "items": [
    {
      "productId": "PRODUTO_LIMITADO_ID_HERE",
      "quantity": 2
    }
  ]
}

###

# Tentar outro pedido (deve falhar - sem estoque)
POST http://localhost:3003/v1/orders
Content-Type: application/json

{
  "clientId": "CLIENT_ESTOQUE_ID_HERE",
  "items": [
    {
      "productId": "PRODUTO_LIMITADO_ID_HERE",
      "quantity": 1
    }
  ]
}

###

# Verificar estoque atual
GET http://localhost:3001/v1/products/PRODUTO_LIMITADO_ID_HERE
###

# Repor estoque
PUT http://localhost:3001/v1/products/PRODUTO_LIMITADO_ID_HERE/stock
Content-Type: application/json

{
  "stock": 10
}

###

### =================================================================
### PAGAMENTOS MÚLTIPLOS
### =================================================================

# Criar cliente para pagamentos
POST http://localhost:3002/v1/clients
Content-Type: application/json

{
  "name": "Cliente Pagamento",
  "email": "cliente.pagamento@email.com"
}

###

# Pagamento parcial - 50% Cartão (substitua IDs)
POST http://localhost:3004/v1/payments/process/ORDER_PREMIUM_ID_HERE
Content-Type: application/json

{
  "payments": [
    {
      "typePaymentId": "CARTAO_PAYMENT_TYPE_ID_HERE",
      "amount": 2500.00
    }
  ]
}

###

# Completar pagamento - 50% PIX (substitua IDs)
POST http://localhost:3004/v1/payments/process/ORDER_PREMIUM_ID_HERE
Content-Type: application/json

{
  "payments": [
    {
      "typePaymentId": "PIX_PAYMENT_TYPE_ID_HERE",
      "amount": 2500.00
    }
  ]
}

###

# Verificar todos os pagamentos
GET http://localhost:3004/v1/payments/orders/ORDER_PREMIUM_ID_HERE
###

### =================================================================
### CONSULTAS E BUSCA INDIVIDUAL
### =================================================================

# Buscar cliente específico
GET http://localhost:3002/v1/clients/CLIENT_ID_HERE
###

# Buscar produto específico
GET http://localhost:3001/v1/products/PRODUCT_ID_HERE
###

# Buscar pedido específico
GET http://localhost:3003/v1/orders/ORDER_ID_HERE
###

# Buscar pedidos por cliente
GET http://localhost:3003/v1/orders/client/CLIENT_ID_HERE
###

# Buscar recursos inexistentes (devem retornar 404)
GET http://localhost:3002/v1/clients/cliente-inexistente
###
GET http://localhost:3001/v1/products/produto-inexistente
###
GET http://localhost:3003/v1/orders/pedido-inexistente
###

### =================================================================
### NOVAS FUNCIONALIDADES - 
### =================================================================

# Gestão Avançada de Estoque - Incrementar/Decrementar

# Criar produto para teste de estoque
POST http://localhost:3001/v1/products
Content-Type: application/json

{
  "name": "Produto Gestão Estoque",
  "price": 199.99,
  "stock": 50
}

###

# Incrementar estoque (+20 unidades)
PUT http://localhost:3001/v1/products/PRODUTO_GESTAO_ID_HERE/stock
Content-Type: application/json

{
  "stock": 20
}

###

# Decrementar estoque (-5 unidades)
PUT http://localhost:3001/v1/products/PRODUTO_GESTAO_ID_HERE/stock
Content-Type: application/json

{
  "stock": -5
}

###

# Verificar estoque após operações
GET http://localhost:3001/v1/products/PRODUTO_ID_HERE
###

# Tentar decrementar mais que disponível (deve falhar)
PUT http://localhost:3001/v1/products/PRODUTO_ID_HERE/stock
Content-Type: application/json

{
  "stock": -100
}

###

# Pagamentos Múltiplos - Vários métodos por transação

# Criar cliente para pagamentos múltiplos
POST http://localhost:3002/v1/clients
Content-Type: application/json

{
  "name": "Cliente Pagamentos Múltiplos",
  "email": "multiplos@email.com"
}

###

# Criar produto caro para demonstrar pagamentos múltiplos
POST http://localhost:3001/v1/products
Content-Type: application/json

{
  "name": "Produto Caro",
  "price": 10000.00,
  "stock": 3
}

###

# Criar pedido caro (substitua IDs)
POST http://localhost:3003/v1/orders
Content-Type: application/json

{
  "clientId": "CLIENT_MULTIPLOS_ID_HERE",
  "items": [
    {
      "productId": "PRODUTO_CARO_ID_HERE",
      "quantity": 1
    }
  ]
}

###

# Pagamento com MÚLTIPLOS métodos (substitua IDs)
POST http://localhost:3004/v1/payments/process/ORDER_CARO_ID_HERE
Content-Type: application/json

{
  "payments": [
    {
      "typePaymentId": "CARTAO_CREDITO_ID_HERE",
      "amount": 4000.00
    },
    {
      "typePaymentId": "PIX_ID_HERE", 
      "amount": 3000.00
    },
    {
      "typePaymentId": "BOLETO_ID_HERE",
      "amount": 3000.00
    }
  ]
}

###

# Verificar todos os pagamentos do pedido
GET http://localhost:3004/v1/payments/orders/ORDER_CARO_ID_HERE
###

# Pagamento Parcial Seguido de Complementar

# Primeiro pagamento parcial - 60% do valor
POST http://localhost:3004/v1/payments/process/ORDER_CARO_ID_HERE
Content-Type: application/json

{
  "payments": [
    {
      "typePaymentId": "CARTAO_CREDITO_ID_HERE",
      "amount": 6000.00
    }
  ]
}

###

# Complementar pagamento - 40% restante
POST http://localhost:3004/v1/payments/process/ORDER_CARO_ID_HERE
Content-Type: application/json

{
  "payments": [
    {
      "typePaymentId": "PIX_ID_HERE",
      "amount": 4000.00
    }
  ]
}

###

### =================================================================
### LISTAGEM COMPLETA - Verificação final
### =================================================================

# Listar todos os clientes criados
GET http://localhost:3002/v1/clients
###

# Listar todos os produtos criados  
GET http://localhost:3001/v1/products
###

# Listar todos os pedidos criados
GET http://localhost:3003/v1/orders
###

# Listar todos os tipos de pagamento
GET http://localhost:3004/v1/payments/types
###


