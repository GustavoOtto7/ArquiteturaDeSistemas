# üß™ Extens√£o REST Client - Testes Completos da E-commerce API
# Para usar: Instale a extens√£o "REST Client" no VS Code

### üè† Verificar se API est√° funcionando
GET http://localhost:3000/

### üõçÔ∏è === PRODUTOS ===

### Listar todos os produtos
GET http://localhost:3000/products

### Criar produto - Smartphone
POST http://localhost:3000/products
Content-Type: application/json

{
  "name": "Smartphone Samsung Galaxy",
  "price": 1299.99,
  "stock": 25
}

### Criar produto - Fone de Ouvido
POST http://localhost:3000/products
Content-Type: application/json

{
  "name": "Fone de Ouvido Bluetooth",
  "price": 199.90,
  "stock": 50
}

### Criar produto - Cabo USB
POST http://localhost:3000/products
Content-Type: application/json

{
  "name": "Cabo USB-C",
  "price": 29.99,
  "stock": 100
}

### Buscar produto por ID (substitua pelo ID real)
GET http://localhost:3000/products/SUBSTITUIR_PELO_ID_REAL

### Atualizar produto (substitua pelo ID real)
PUT http://localhost:3000/products/SUBSTITUIR_PELO_ID_REAL
Content-Type: application/json

{
  "name": "Smartphone Samsung Galaxy S24 Ultra",
  "price": 1199.99,
  "stock": 30
}

### Deletar produto (substitua pelo ID real)
DELETE http://localhost:3000/products/SUBSTITUIR_PELO_ID_REAL

### ‚ùå Testar produto inexistente
GET http://localhost:3000/products/00000000-0000-0000-0000-000000000000

### ‚ùå Criar produto com dados inv√°lidos
POST http://localhost:3000/products
Content-Type: application/json

{
  "name": "",
  "price": -10,
  "stock": -5
}

### üõí === PEDIDOS ===

### Listar todos os pedidos
GET http://localhost:3000/orders

### Criar pedido simples (substitua productId)
POST http://localhost:3000/orders
Content-Type: application/json

{
  "items": [
    {
      "productId": "SUBSTITUIR_PELO_ID_DO_PRODUTO",
      "quantity": 2
    }
  ]
}

### Criar pedido com m√∫ltiplos itens
POST http://localhost:3000/orders
Content-Type: application/json

{
  "items": [
    {
      "productId": "PRODUTO_ID_1",
      "quantity": 1
    },
    {
      "productId": "PRODUTO_ID_2", 
      "quantity": 3
    }
  ]
}

### Buscar pedido por ID (substitua pelo ID real)
GET http://localhost:3000/orders/SUBSTITUIR_PELO_ID_REAL

### ‚ùå Criar pedido com produto inexistente
POST http://localhost:3000/orders
Content-Type: application/json

{
  "items": [
    {
      "productId": "00000000-0000-0000-0000-000000000000",
      "quantity": 1
    }
  ]
}

### ‚ùå Criar pedido sem itens
POST http://localhost:3000/orders
Content-Type: application/json

{
  "items": []
}

### ‚ùå Testar limite de estoque
POST http://localhost:3000/orders
Content-Type: application/json

{
  "items": [
    {
      "productId": "PRODUTO_ID_VALIDO",
      "quantity": 999999
    }
  ]
}

### üß™ === TESTES ESPECIAIS ===

### Endpoint inexistente
GET http://localhost:3000/invalid-endpoint

### M√©todo n√£o permitido
POST http://localhost:3000/products/123/invalid

### Teste de performance - criar m√∫ltiplos produtos
POST http://localhost:3000/products
Content-Type: application/json

{
  "name": "Produto Teste Performance 1",
  "price": 99.99,
  "stock": 10
}

###
POST http://localhost:3000/products
Content-Type: application/json

{
  "name": "Produto Teste Performance 2", 
  "price": 149.99,
  "stock": 20
}

###
POST http://localhost:3000/products
Content-Type: application/json

{
  "name": "Produto Teste Performance 3",
  "price": 199.99,
  "stock": 30
}

### üìù === INSTRU√á√ïES ===
# 1. Primeiro execute "Listar todos os produtos" para ver produtos existentes
# 2. Copie IDs reais e substitua "SUBSTITUIR_PELO_ID_REAL" nos testes
# 3. Execute os testes na ordem para melhor resultado
# 4. Use Ctrl+Alt+R (Windows) ou Cmd+Alt+R (Mac) para executar
# 5. Verifique sempre se os containers Docker est√£o rodando

### üë• === CLIENTES ===

### Listar todos os clientes
GET http://localhost:3000/clients

### Criar cliente - Jo√£o Silva
POST http://localhost:3000/clients
Content-Type: application/json

{
  "name": "Jo√£o Silva",
  "email": "joao.silva@email.com"
}

### Criar cliente - Maria Santos
POST http://localhost:3000/clients
Content-Type: application/json

{
  "name": "Maria Santos",
  "email": "maria.santos@email.com"
}

### Obter cliente espec√≠fico (substitua pelo ID real)
GET http://localhost:3000/clients/SUBSTITUIR_PELO_ID_REAL_DO_CLIENTE

### Atualizar cliente (substitua pelo ID real)
PUT http://localhost:3000/clients/SUBSTITUIR_PELO_ID_REAL_DO_CLIENTE
Content-Type: application/json

{
  "name": "Jo√£o Silva Atualizado",
  "email": "joao.silva.novo@email.com"
}

### Deletar cliente (soft delete - substitua pelo ID real)
DELETE http://localhost:3000/clients/SUBSTITUIR_PELO_ID_REAL_DO_CLIENTE

### üìã === PEDIDOS COM CLIENTES ===

### Criar pedido com cliente (substitua pelos IDs reais)
POST http://localhost:3000/orders
Content-Type: application/json

{
  "clientId": "SUBSTITUIR_PELO_ID_REAL_DO_CLIENTE",
  "items": [
    {
      "productId": "SUBSTITUIR_PELO_ID_REAL_DO_PRODUTO",
      "quantity": 2
    }
  ]
}

### ‚öôÔ∏è === SISTEMA (STATUS E TIPOS DE PAGAMENTO) ===

### Listar todos os status
GET http://localhost:3000/status

### Criar novo status
POST http://localhost:3000/status
Content-Type: application/json

{
  "name": "Em Prepara√ß√£o"
}

### Listar tipos de pagamento
GET http://localhost:3000/payment-types

### Criar novo tipo de pagamento
POST http://localhost:3000/payment-types
Content-Type: application/json

{
  "name": "PayPal"
}